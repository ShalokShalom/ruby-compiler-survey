2020-06-13T03:34:26.796+01:00 [main] INFO Interpreter : Printing simple IR for inline.rb:
begin SCRIPT_BODY<inline.rb>
flags: [BINDING_HAS_ESCAPED, HAS_LOOPS, REQUIRES_DYNSCOPE, REQUIRES_VISIBILITY, REQUIRES_BLOCK, FLAGS_COMPUTED]
signature(pre=0,opt=0,post=0,rest=NONE,kwargs=0,kwreq=0,kwrest=-1)
declared variables:
  bar(0:0)

  00:           %self := recv_self
  01:            %v_0 := load_frame_closure
  02:  %current_scope := copy(scope<>)
  03: %current_module := copy(mod<0>)
  04:                    line_num(lineNumber: 0)
  05:            %v_3 := def_class(mod<0>, undef<>, body: CLASS_BODY Bar[inline.rb:0]<startup>)
  06:                    line_num(lineNumber: 6)
  07:                    def_inst_meth(method: INSTANCE_METHOD foo[inline.rb:6]<startup>)
  08:                    line_num(lineNumber: 10)
  09:            %v_4 := search_const(scope<>, constantName: Bar, noPrivateConsts: false)
  10:            *bar := call_0o(%v_4, callType: NORMAL, name: new, potentiallyRefined: false)
  11:                    line_num(lineNumber: 12)
  12:                    label(ipc<_LOOP_BEGIN_0:13>)
  13:                    nop
  14:                    label(ipc<_ITER_BEGIN_2:15>)
  15:                    thread_poll(onBackEdge: true)
  16:                    line_num(lineNumber: 13)
  17:            %v_6 := call_1o(self<%self>, *bar, callType: FUNCTIONAL, name: foo, potentiallyRefined: false)
  18:                    label(ipc<_ITER_END_3:19>)
  19:                    jump(ipc<_LOOP_BEGIN_0:13>)
  20:                    label(ipc<LBL_4:21>)
  21:            %v_5 := copy(nil<>)
  22:                    label(ipc<_LOOP_END_1:23>)
  23:                    return(%v_5)

2020-06-13T03:34:26.801+01:00 [main] INFO MixedModeIRMethod : Printing simple IR for bar:
begin INSTANCE_METHOD<bar>
flags: [FLAGS_COMPUTED]
signature(pre=0,opt=0,post=0,rest=NONE,kwargs=0,kwreq=0,kwrest=-1)

  0:           %self := recv_self
  1:            %v_0 := load_implicit_closure
  2:  %current_scope := copy(scope<>)
  3: %current_module := copy(mod<0>)
  4:                    check_arity(required: 0, opt: 0, rest: false, receivesKeywords: false, restKey: -1)
  5:                    line_num(lineNumber: 2)
  6:                    return(fix<14>)

2020-06-13T03:34:26.802+01:00 [main] INFO MixedModeIRMethod : Printing simple IR for foo:
begin INSTANCE_METHOD<foo>
flags: [FLAGS_COMPUTED]
signature(pre=1,opt=0,post=0,rest=NONE,kwargs=0,kwreq=0,kwrest=-1)
declared variables:
  bar(0:0)

  0:           %self := recv_self
  1:            %v_0 := load_implicit_closure
  2:  %current_scope := copy(scope<>)
  3: %current_module := copy(mod<0>)
  4:                    check_arity(required: 1, opt: 0, rest: false, receivesKeywords: false, restKey: -1)
  5:            *bar := recv_pre_reqd_arg(argIndex: 0)
  6:                    line_num(lineNumber: 7)
  7:            %v_3 := call_0o(*bar, callType: NORMAL, name: bar, potentiallyRefined: false)
  8:                    return(%v_3)

2020-06-13T03:34:26.804+01:00 [main] INFO ProfilingCachingCallSite : PROFILE: INSTANCE_METHOD foo[inline.rb:6]<startup> -> INSTANCE_METHOD bar[inline.rb:1]<startup> - 21
2020-06-13T03:34:26.807+01:00 [main] INFO CompilerPass : Printing IR CFG before Optimize Dynamic Scopes for foo:

CFG:
BB [1:LBL_0:-1]:>[2,3]
BB [2:LBL_1:-1]:>[3], <[1]
BB [3:LBL_2:-1]:<[1,2]

Instructions:
BB [1:LBL_0:-1] -EXIT->3 -FALL_THROUGH->2
BB [2:LBL_1:-1] -EXIT->3
	%self = recv_self()
	%v_0 = load_implicit_closure()
	%current_scope = copy(%scope)
	%current_module = copy(module<0>)
	check_arity(;req: 1, opt: 0, *r: false, kw: false)
	bar(0:0) = recv_pre_reqd_arg(;i:0)
	line_num(;n: 7)
	%v_3 = call_0o(bar(0:0) ;n:bar, t:NO, cl:false)
	return(%v_3)
BB [3:LBL_2:-1]

2020-06-13T03:34:26.808+01:00 [main] INFO CompilerPass : Printing IR CFG after Optimize Dynamic Scopes for foo:

CFG:
BB [1:LBL_0:-1]:>[2,3]
BB [2:LBL_1:-1]:>[3], <[1]
BB [3:LBL_2:-1]:<[1,2]

Instructions:
BB [1:LBL_0:-1] -EXIT->3 -FALL_THROUGH->2
BB [2:LBL_1:-1] -EXIT->3
	%self = recv_self()
	%v_0 = load_implicit_closure()
	%current_scope = copy(%scope)
	%current_module = copy(module<0>)
	check_arity(;req: 1, opt: 0, *r: false, kw: false)
	%t_bar_4 = recv_pre_reqd_arg(;i:0)
	line_num(;n: 7)
	%v_3 = call_0o(%t_bar_4 ;n:bar, t:NO, cl:false)
	return(%v_3)
BB [3:LBL_2:-1]

2020-06-13T03:34:26.808+01:00 [main] INFO CompilerPass : Printing IR CFG before Live Variable Analysis for foo:

CFG:
BB [1:LBL_0:-1]:>[2,3]
BB [2:LBL_1:-1]:>[3], <[1]
BB [3:LBL_2:-1]:<[1,2]

Instructions:
BB [1:LBL_0:-1] -EXIT->3 -FALL_THROUGH->2
BB [2:LBL_1:-1] -EXIT->3
	%self = recv_self()
	%v_0 = load_implicit_closure()
	%current_scope = copy(%scope)
	%current_module = copy(module<0>)
	check_arity(;req: 1, opt: 0, *r: false, kw: false)
	%t_bar_4 = recv_pre_reqd_arg(;i:0)
	line_num(;n: 7)
	%v_3 = call_0o(%t_bar_4 ;n:bar, t:NO, cl:false)
	return(%v_3)
BB [3:LBL_2:-1]

2020-06-13T03:34:26.809+01:00 [main] INFO CompilerPass : Printing IR CFG after Live Variable Analysis for foo:

CFG:
BB [1:LBL_0:-1]:>[2,3]
BB [2:LBL_1:-1]:>[3], <[1]
BB [3:LBL_2:-1]:<[1,2]

Instructions:
BB [1:LBL_0:-1] -EXIT->3 -FALL_THROUGH->2
BB [2:LBL_1:-1] -EXIT->3
	%self = recv_self()
	%v_0 = load_implicit_closure()
	%current_scope = copy(%scope)
	%current_module = copy(module<0>)
	check_arity(;req: 1, opt: 0, *r: false, kw: false)
	%t_bar_4 = recv_pre_reqd_arg(;i:0)
	line_num(;n: 7)
	%v_3 = call_0o(%t_bar_4 ;n:bar, t:NO, cl:false)
	return(%v_3)
BB [3:LBL_2:-1]

2020-06-13T03:34:26.809+01:00 [main] INFO CompilerPass : Printing IR CFG before Dead Code Elimination for foo:

CFG:
BB [1:LBL_0:-1]:>[2,3]
BB [2:LBL_1:-1]:>[3], <[1]
BB [3:LBL_2:-1]:<[1,2]

Instructions:
BB [1:LBL_0:-1] -EXIT->3 -FALL_THROUGH->2
BB [2:LBL_1:-1] -EXIT->3
	%self = recv_self()
	%v_0 = load_implicit_closure()
	%current_scope = copy(%scope)
	%current_module = copy(module<0>)
	check_arity(;req: 1, opt: 0, *r: false, kw: false)
	%t_bar_4 = recv_pre_reqd_arg(;i:0)
	line_num(;n: 7)
	%v_3 = call_0o(%t_bar_4 ;n:bar, t:NO, cl:false)
	return(%v_3)
BB [3:LBL_2:-1]

2020-06-13T03:34:26.809+01:00 [main] INFO CompilerPass : Printing IR CFG after Dead Code Elimination for foo:

CFG:
BB [1:LBL_0:-1]:>[2,3]
BB [2:LBL_1:-1]:>[3], <[1]
BB [3:LBL_2:-1]:<[1,2]

Instructions:
BB [1:LBL_0:-1] -EXIT->3 -FALL_THROUGH->2
BB [2:LBL_1:-1] -EXIT->3
	check_arity(;req: 1, opt: 0, *r: false, kw: false)
	%t_bar_4 = recv_pre_reqd_arg(;i:0)
	line_num(;n: 7)
	%v_3 = call_0o(%t_bar_4 ;n:bar, t:NO, cl:false)
	return(%v_3)
BB [3:LBL_2:-1]

2020-06-13T03:34:26.809+01:00 [main] INFO CompilerPass : Printing IR CFG before Add Call Protocol Instructions (push/pop of dyn-scope, frame, impl-class values) for foo:

CFG:
BB [1:LBL_0:-1]:>[2,3]
BB [2:LBL_1:-1]:>[3], <[1]
BB [3:LBL_2:-1]:<[1,2]

Instructions:
BB [1:LBL_0:-1] -EXIT->3 -FALL_THROUGH->2
BB [2:LBL_1:-1] -EXIT->3
	check_arity(;req: 1, opt: 0, *r: false, kw: false)
	%t_bar_4 = recv_pre_reqd_arg(;i:0)
	line_num(;n: 7)
	%v_3 = call_0o(%t_bar_4 ;n:bar, t:NO, cl:false)
	return(%v_3)
BB [3:LBL_2:-1]

2020-06-13T03:34:26.810+01:00 [main] INFO CompilerPass : Printing IR CFG after Add Call Protocol Instructions (push/pop of dyn-scope, frame, impl-class values) for foo:

CFG:
BB [1:LBL_0:-1]:>[2,3]
BB [2:LBL_1:-1]:>[3], <[1]
BB [3:LBL_2:-1]:<[1,2]

Instructions:
BB [1:LBL_0:-1] -EXIT->3 -FALL_THROUGH->2
BB [2:LBL_1:-1] -EXIT->3
	check_arity(;req: 1, opt: 0, *r: false, kw: false)
	%t_bar_4 = recv_pre_reqd_arg(;i:0)
	line_num(;n: 7)
	%v_3 = call_0o(%t_bar_4 ;n:bar, t:NO, cl:false)
	return(%v_3)
BB [3:LBL_2:-1]

2020-06-13T03:34:26.811+01:00 [main] INFO CFGInliner : ---------------------------------- PROLOGUE (start) --------
2020-06-13T03:34:26.811+01:00 [main] INFO CFGInliner : Looking for: 1027:
    > %v_3 = call_0o(%t_bar_4 ;n:bar, t:NO, cl:false)

2020-06-13T03:34:26.811+01:00 [main] INFO CFGInliner : host of inline cfg:
BB [1:LBL_0:0]:>[2,3]
BB [2:LBL_1:0]:>[3], <[1]
BB [3:LBL_2:6]:<[1,2]

2020-06-13T03:34:26.811+01:00 [main] INFO CFGInliner : host of inline instrs:
BB [1:LBL_0:0] -EXIT->3 -FALL_THROUGH->2
BB [2:LBL_1:0] -EXIT->3
	check_arity(;req: 1, opt: 0, *r: false, kw: false)
	%t_bar_4 = recv_pre_reqd_arg(;i:0)
	line_num(;n: 7)
	%v_3 = call_0o(%t_bar_4 ;n:bar, t:NO, cl:false)
	return(%v_3)
BB [3:LBL_2:6]

2020-06-13T03:34:26.811+01:00 [main] INFO CFGInliner : method to inline cfg:
BB [1:LBL_0:-1]:>[2,3]
BB [2:LBL_1:-1]:>[3], <[1]
BB [3:LBL_2:-1]:<[1,2]

2020-06-13T03:34:26.811+01:00 [main] INFO CFGInliner : method to inline instrs:
BB [1:LBL_0:-1] -EXIT->3 -FALL_THROUGH->2
BB [2:LBL_1:-1] -EXIT->3
	[DEAD]%self = recv_self()
	%v_0 = load_implicit_closure()
	%current_scope = copy(%scope)
	%current_module = copy(module<0>)
	check_arity(;req: 0, opt: 0, *r: false, kw: false)
	line_num(;n: 2)
	return(Fixnum:14)
BB [3:LBL_2:-1]

2020-06-13T03:34:26.811+01:00 [main] INFO CFGInliner : ---------------------------------- PROLOGUE (end) -----------
2020-06-13T03:34:26.812+01:00 [main] INFO CFGInliner : ---------------------------------- SPLIT BB (start) --------
2020-06-13T03:34:26.812+01:00 [main] INFO CFGInliner : Before:LBL_1:0
2020-06-13T03:34:26.812+01:00 [main] INFO CFGInliner : BB [2:LBL_1:0]
	check_arity(;req: 1, opt: 0, *r: false, kw: false)
	%t_bar_4 = recv_pre_reqd_arg(;i:0)
	line_num(;n: 7)

2020-06-13T03:34:26.812+01:00 [main] INFO CFGInliner : After:LBL_3:-1
2020-06-13T03:34:26.812+01:00 [main] INFO CFGInliner : BB [4:LBL_3:-1] -EXIT->3
	return(%v_3)

2020-06-13T03:34:26.812+01:00 [main] INFO CFGInliner :  cfg:
BB [1:LBL_0:0]:>[2,3]
BB [2:LBL_1:0]:<[1]
BB [3:LBL_2:6]:<[1,4]
BB [4:LBL_3:-1]:>[3]

2020-06-13T03:34:26.812+01:00 [main] INFO CFGInliner :  instrs:
BB [1:LBL_0:0] -EXIT->3 -FALL_THROUGH->2
BB [2:LBL_1:0]
	check_arity(;req: 1, opt: 0, *r: false, kw: false)
	%t_bar_4 = recv_pre_reqd_arg(;i:0)
	line_num(;n: 7)
BB [3:LBL_2:6]
BB [4:LBL_3:-1] -EXIT->3
	return(%v_3)

2020-06-13T03:34:26.812+01:00 [main] INFO CFGInliner : ---------------------------------- SPLIT BB (end) -----------
2020-06-13T03:34:26.813+01:00 [main] INFO CFGInliner : ---------------------------------- EPILOGUE (start) --------
2020-06-13T03:34:26.813+01:00 [main] INFO CFGInliner :  cfg:
BB [1:LBL_0:0]:>[2,3]
BB [2:LBL_1:0]:>[5,6], <[1]
BB [3:LBL_2:10]:<[1,5,6]
BB [5:LBL_4:3]:>[3], <[2]
BB [6:LBL_5:-1]:>[3], <[2]

2020-06-13T03:34:26.813+01:00 [main] INFO CFGInliner :  instrs:
BB [1:LBL_0:0] -EXIT->3 -FALL_THROUGH->2
BB [2:LBL_1:0] -FALL_THROUGH->5 -REGULAR->6
	check_arity(;req: 1, opt: 0, *r: false, kw: false)
	%t_bar_4 = recv_pre_reqd_arg(;i:0)
	line_num(;n: 7)
	module_guard(%t_bar_4, LBL_5:-1 ;name: Object, expected_version: 14360)
BB [3:LBL_2:10]
BB [5:LBL_4:3] -EXIT->3
	%v_5 = copy(nil)
	%v_6 = copy(org.jruby.ir.operands.Scope@74a820bf)
	%v_7 = copy(module<0>)
	line_num(;n: 2)
	return(Fixnum:14)
BB [6:LBL_5:-1] -EXIT->3
	%v_3 = call_0o(%t_bar_4 ;n:bar, t:NO, cl:false)
	return(%v_3)

2020-06-13T03:34:26.813+01:00 [main] INFO CFGInliner : ---------------------------------- EPILOGUE (end) -----------
2020-06-13T03:34:26.813+01:00 [main] INFO IRScope : Inline of INSTANCE_METHOD bar[inline.rb:1]<full> into INSTANCE_METHOD foo[inline.rb:6]<full> succeeded.
2020-06-13T03:34:26.822+01:00 [main] INFO JVMVisitor : Printing JIT IR for foo:
begin INSTANCE_METHOD<foo>
flags: [HAS_EXPLICIT_CALL_PROTOCOL, DYNSCOPE_ELIMINATED, FLAGS_COMPUTED]
signature(pre=1,opt=0,post=0,rest=NONE,kwargs=0,kwreq=0,kwrest=-1)
declared variables:
  bar(0:0)

  0:             check_arity(required: 1, opt: 0, rest: false, receivesKeywords: false, restKey: -1)
  1: %t_bar_4 := recv_pre_reqd_arg(argIndex: 0)
  2:             line_num(lineNumber: 7)
  3:     %v_5 := copy(nil<>)
  4:     %v_6 := copy(scope<org.jruby.ir.operands.Scope@74a820bf>)
  5:     %v_7 := copy(mod<0>)
  6:             line_num(lineNumber: 2)
  7:     %v_3 := copy(fix<14>)
  8:             return(%v_3)

